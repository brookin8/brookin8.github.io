---
layout: post
title:  "Week 4: Vue.js: Part 2 (Components, Filters, and Computed)"
date:   2017-10-11 01:09:27 -0400
categories: Vue.js, Vue, Components, Frameworks
---

Like with most things, the more you get into Vue, the more approachable it becomes.

The Vue documentation, while very clear and well-littered with helpful pictures and code-snippets, is chock full of jargon that is mind-boggling to those of us coming in with zero framework experience. The concept of a "component", for example, is something that is referenced frequently, yet most of us had no idea what this was (rendering the surrounding instructions useless). 

Walking through an example of using a component was immensely helpful, and has been a big step towards de-coding the rest of the Vue documentation.  

<br>

## **Components: What are they?**
We have been continuously stressing one goal in particular throughout our web development journey thus far: clean, intuitive, minimal code. 

In effort to achieve this goal, we use components. 

There's a secondary goal as well. In the real world, many companies will have a library of components. The library will include components for things like a drop-down menu, a header, a title, etc. The UX Design team will use these components when creating pages of the site, which means that all of the different pages will have a similar look and feel. In this way, components also ensure cohesion. 

So what is it?

A component is nothing more than a Vue template you can reuse over and over again. Typically, it's a combination of html tags, innerHTMl content, functions and possibly styling. 

For me, it makes sense to think of a component as a class. When you call it in your various Vue instances, you're basically creating an unique object of that class. It knows what properties to expect, and when you call it in an instance, you pass element-specific values to those properties.  

### Here's an example: 

#### JS Doc:

	Vue.component('greeting', {
	    template : '<h1>{{message}}</h1>',
	    props : ['message']
	});

	var vm = new Vue({
 		el : '#app',
 		data : {
 			message : 'Hello!'
 		} 
	});

#### HTML Doc:

	<html>
		<head>
		</head
		<body>

			<div id="app">
				<div is="greeting" v-bind:message="message"></div>
			</div>

		</body>
	</html>

#### To break it down:

In the JS Doc:
* 'Greeting' : Name of the component
* 'Template' : Defines the structure that will be applied to the HTML element that the component is applied to. 
* 'Props' : These are the data elements that are used in the component, and will be defined in the vue instance. You can call them whatever you want, but the value has to be consistent throughout the component. It will be bound to the proper data element when you apply the component in your HTML doc. 

In the HTML Doc:
* 'is=greeting' : To declare that this div is going to be structured following the greeting template. We could also have done away with the div tags altogether and formatted it as follows:
	<greeting v-bind:message="message"></greeting>
* 'v-bind:message = "message"' : This is where we're binding the message prop in the component (the first message) to the message data element in the vue instance (the second message).

<br>
<br>

## **Global Components**
The component in the example above is what's called a global component. It's declared on its own, outside of a vue instance, and can be used across many vue instances. It can even be used across other applications, and within other components. 

<br>
<br>

## **Local Components**
A local component, on the other hand, can only be used wherever it is registered. You could store it in a variable, and then access that variable within the "components" attribute in a vue instance. 

### Using the example above:

	var greeting = {
	    template : '<h1>{{message}}</h1>',
	    props : ['message']
	};

	var vm = new Vue({
 		el : '#app',
 		data : {
 			message : 'Hello!'
 		},
 		components : {
 			'greeting' : greeting
 		}
	});

Now we can use greeting in our vue instance!

The more likely use of local components, however, is to build them in their own document (with a .vue suffix) and import them into your main.js. 

### Here's an example of a vue.js doc: 

	<template>
	<div class="card" 
		v-bind:class="cardNum"
		v-on:click ="reportClick(cardNum)"></div>
	</template>

	<script>

	export default {

		name : 'card', 
		props : [ 'cardNum'],
		methods : {
			reportClick : function(cardNum) {
			this.$emit('cardClicked', cardNum);

			}
		}
	}

	</script>

	<style>
	.card {
		margin : 5px;
	}
	</style>

### To break it down:

#### Template Section
The code within the template section is defining the HTML structure and content that will be executed when we use the card component. 

#### Script Section
'export default' is doing exactly what it sounds like it is -  we are packaging everything that we defined in template, and all of the props and methods below into a nice package (or Component), and giving the package the name of 'card'.

### Style Section
This section holds the related css styling cold for the component. 

Not so bad, right? Well here's when it gets hairy. Try using 'require' (ES5) or 'import' (ES6) in your main.js document, and your console will loose it's mind. This functions only work on the BACKEND, and will not work when called within a main.js page that links directly to the index.html page you are rendering. 

How do we get past this seemingly impossible hurdle?

<br>
<br>

## **The Vue CLI**

Yes! There is already an amazingly user-friendly bundle out there that fixes all of this for you. 

There are downloadable tools - most notably Browserify and Webpack - built specifically to allow you to use 'require' or 'import' on the front end. 

However, what Vue CLI does for you is to package these tools up nicely into pre-built templates made specifically for interacting with the Vue framework. Muah! (Kiss fingers)

Simply download the Vue CLI, pick your template of choice, get and you're off and running (this is all outlined in their easy-to-follow instructions). We built a seperate components folder within the pre-built src folder to hold vue documents that we would then import into the existing App.vue doc (which is then, finally, imported into your main.js). 

You never actually code in your main.js. It is only there for final rendering. Instead, you code directly in the App.Vue file, or in your own vue files (linked ultimately to the App.Vue file). 

All of the crazy webpack-ing, browserify-ing, babel-ing just goes on automatically in the background, with instant hot-rendering on your local server. 

Pretty cool. 

<br>
<br>

## **And One Other Thing I Learned This Week that Almost Made Me A Crazy Person**

Scope! Scope almost killed my projects a few times this week. 

You'll notice in Vue code that your page is riddled with the syntax "this.". Keep in mind that the deeper you go into your code, the value of 'this' may change.

Specifically, I'm referring to nested functions. If you're doing a function within a function (and not declaring the nestd function elsewhere seperately), you probably want to be wary of using 'this.'.

Instead, it's a good idea to save the value of this.whateverYouWant when you know it's equal to the correct value you want by placing it into a variable. It's like freezing it in time.

You are then safe to reference this variable in nested within nested within nested functions (as long as you don't declare another variable with the same name... but why would you do that to yourself?!).

For example: 

### In the Data Section: 

cards: [
			{
				number: 0, 
				active: false,
		
			}, 
			{
				number: 1, 
				active: false
		]	



### In the Methods Section: 
	
	checkForMatch : function() {
				
		var cards = this.cards; 

			setTimeout(function() { 								
				cards.splice(card1Num,1, {
					'number' : card1Num,
					'active' : false
				});						
				cards.splice(card2Num,1, {
					'number' : card2Num,
					'active' : false
				});
			}, 1000);
	}

### The Break Down: 

What we have in the example above is a method called 'checkForMatch'. When we first jump into the code of that method, the keyword 'this' refers to the vue component as a whole. However, as we move into the inner setTimeout function, 'this' will refer to the method itself (I believe I'm right here... but it's not the component anymore at least). Therefore, we 'freeze' the 'this.cards' value we want when we know it's right by storing it in the variable 'cards'. Now, the value of 'cards' will remain the same even as we go deeper and deeper into nested functions.

Scope in JavaScript is mind-boggling. But baby steps! 

## Big Takeaway:
I think right now that frameworks still seem like a LOT of mental work for not enough payoff. HOWEVER, talking to a few of my classmates who have real-world experience on the front-end of things, it sounds like it makes a lot of sense for robust projects. They described using large pre-built component libraries to pull in different pieces of a site (IE a header, drop-down menu, footer, image, etc.). 

With that perspective, components would allow you to have consistent styling and cohesion across all of your pages, regardless of which developers work on them. It also would save all of those developers tons of time and code by being able to reuse all of these pre-packaged component bundles. 

Being able to connect this piece to a real-world example is often key in grounding new knowledge. 






